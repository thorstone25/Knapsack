Project #2 Results
Due: 5/26/17
Thurston Brevett
Pooja Jhaveri

This project required the implementation of greedy algorithms to find solutions for the Knapsack and Graph coloring optimization problems.

The greedy algorithm for the Knapsack problem required ordering the given set of items in decreasing value per cost (density). Checked in order of density, if the adding an item did not exceed the cost constraint, then that item could be selected. The entire list of objects was checked in this manner and the best knapsack was returned.

For the Graph coloring problem, the greedy algorithm involved ordering the nodes in a given graph by decreasing degree (number of adjacent nodes). Then, for each node (starting with the highest degree) the algorithm checks how many conflicts there would be with each adjacent node for each color. It then selects the color with fewest conflicts with adjacent nodes and assigns it to the current node. This process continues until every node is colored. 

In each case traversing through the ordered list was done in linear O(n) time. The sorting functions ran in O(n^2) time which is slightly more time consuming but still polynomial-time.

Regardless, run times were less than 4ms for Knapsack and under 20ms for Graph coloring, which were significantly less than runtimes for exhaustive search. In addition, the greedy algorithms were also able to find more optimal solutions for large n within the time constraint; Knapsack solutions had higher total values and Graph coloring solutions had fewer conflicts compared to their respective exhaustive search solutions since the exhaustive search had not searched most of the possible solutions for large n cases.

In summary, the greedy algorithms developed for these problems ran significantly quicker and produced more optimal results than the exhaustive algorithms employed in Project 1. 