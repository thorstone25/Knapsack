Project #1 Results
5/18/17
Thurston Brevett
Pooja Jhaveri

This project required the implementation of exhaustive algorithms (with a time limit) to find solutions for the Knapsack and Graph coloring optimization problems.

For the Knapsack problem the first few input files ran under our given time limit of 10 minutes and the exhaustive algorithm was able to check every possibility and return the optimal solution. The algorithm run times were as follows:

knapsack8.input: 0.003628 sec
knapsack12.input: 0.048385 sec
knapsack16.input: 0.865756 sec
knapsack20.input: 15.0829 sec
knapsack24.input: > 10 min

The remaining input files all exceeded the given time limit and the best, albeit non-optimal solution that was found within 10 minutes was returned for each of these cases. This is consistent with our expectations since each file takes an order of magnitude larger in processing time for a small growth in n. A naive estimate of the time complexity would be O(2^n) since two choices are checked for each of n objects. The exponential nature of the algorithm makes it prohibitive for large problems.

Similarly, for the Graph Coloring problem the time necessary to compute an answer for large cases is exponential. In this case, even for small problems, the computation required is prohibitive. The algorithm run times were as follows:
color12-3.input: 3.82438 sec
color12-4.input: 116.408 sec
color24-4.input: > 10 min 

The remaining input files all exceeded the given time limit and the best solution found within 10 minutes was returned for each of these cases.
This large growth with problem size is again consistent with our expectations for an exhaustive algorithm. For m colors, v vertices and e edges, the naive estimate of complexity would be O((v+e)*m^v) since at the end of all recursive execution branches, a subroutine of complexity O(v+e) (the equals operator) is run for each of m branches, 1 per colors, that was branched out v times for each vertex. The exponential nature of the algorithm again makes it prohibitive for large problems.
The above indicates the interesting result that growth is linear with respect to the number of edges, but exponential for the number of vertices, inidicating that the number of vertices has a much greater impact on the run time than the number of edges.

In summary, although it is not very efficient, the exhaustive algorithm is suitable for retuning the optimal solution when working with a small number of items. As n gets larger, the runtime to find an optimal solution increases drastically, thus a time limit is required to abort the program. In this case the current best solution is returned and is unlikely to be optimal or near optimal for most applications.